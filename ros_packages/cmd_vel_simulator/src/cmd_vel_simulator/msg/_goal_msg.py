"""autogenerated by genmsg_py from goal_msg.msg. Do not edit."""
import roslib.message
import struct


class goal_msg(roslib.message.Message):
  _md5sum = "ead0a80715facf19ee84694b8322c9ca"
  _type = "cmd_vel_simulator/goal_msg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 d
float32 th
int16 opt
"""
  __slots__ = ['d','th','opt']
  _slot_types = ['float32','float32','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       d,th,opt
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(goal_msg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.d is None:
        self.d = 0.
      if self.th is None:
        self.th = 0.
      if self.opt is None:
        self.opt = 0
    else:
      self.d = 0.
      self.th = 0.
      self.opt = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_2fh.pack(_x.d, _x.th, _x.opt))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.d, _x.th, _x.opt,) = _struct_2fh.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_2fh.pack(_x.d, _x.th, _x.opt))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.d, _x.th, _x.opt,) = _struct_2fh.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_2fh = struct.Struct("<2fh")
