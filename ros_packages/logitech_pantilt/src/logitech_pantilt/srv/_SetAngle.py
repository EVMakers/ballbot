"""autogenerated by genmsg_py from SetAngleRequest.msg. Do not edit."""
import roslib.message
import struct


class SetAngleRequest(roslib.message.Message):
  _md5sum = "ecd1f62d4afad57b40d43ebefe588fc8"
  _type = "logitech_pantilt/SetAngleRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int16 angle

"""
  __slots__ = ['angle']
  _slot_types = ['int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       angle
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(SetAngleRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.angle is None:
        self.angle = 0
    else:
      self.angle = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      buff.write(_struct_h.pack(self.angle))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 2
      (self.angle,) = _struct_h.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      buff.write(_struct_h.pack(self.angle))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 2
      (self.angle,) = _struct_h.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_h = struct.Struct("<h")
"""autogenerated by genmsg_py from SetAngleResponse.msg. Do not edit."""
import roslib.message
import struct

import roslib.rostime

class SetAngleResponse(roslib.message.Message):
  _md5sum = "a1bf1236fae68f33d69d4e3b6eb13525"
  _type = "logitech_pantilt/SetAngleResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """duration move_time


"""
  __slots__ = ['move_time']
  _slot_types = ['duration']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       move_time
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(SetAngleResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.move_time is None:
        self.move_time = roslib.rostime.Duration()
    else:
      self.move_time = roslib.rostime.Duration()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_2i.pack(_x.move_time.secs, _x.move_time.nsecs))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.move_time is None:
        self.move_time = roslib.rostime.Duration()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.move_time.secs, _x.move_time.nsecs,) = _struct_2i.unpack(str[start:end])
      self.move_time.canon()
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_2i.pack(_x.move_time.secs, _x.move_time.nsecs))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.move_time is None:
        self.move_time = roslib.rostime.Duration()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.move_time.secs, _x.move_time.nsecs,) = _struct_2i.unpack(str[start:end])
      self.move_time.canon()
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_2i = struct.Struct("<2i")
class SetAngle(roslib.message.ServiceDefinition):
  _type          = 'logitech_pantilt/SetAngle'
  _md5sum = '574c5191040aecb1bd87e27d758f9cba'
  _request_class  = SetAngleRequest
  _response_class = SetAngleResponse
