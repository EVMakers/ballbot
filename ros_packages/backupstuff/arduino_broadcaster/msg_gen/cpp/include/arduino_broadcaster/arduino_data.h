/* Auto-generated by genmsg_cpp for file /home/ankush/ros_tutorials/arduino_broadcaster/msg/arduino_data.msg */
#ifndef ARDUINO_BROADCASTER_MESSAGE_ARDUINO_DATA_H
#define ARDUINO_BROADCASTER_MESSAGE_ARDUINO_DATA_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"


namespace arduino_broadcaster
{
template <class ContainerAllocator>
struct arduino_data_ : public ros::Message
{
  typedef arduino_data_<ContainerAllocator> Type;

  arduino_data_()
  : ticks(0)
  , angle(0)
  {
  }

  arduino_data_(const ContainerAllocator& _alloc)
  : ticks(0)
  , angle(0)
  {
  }

  typedef int16_t _ticks_type;
  int16_t ticks;

  typedef int16_t _angle_type;
  int16_t angle;


private:
  static const char* __s_getDataType_() { return "arduino_broadcaster/arduino_data"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "11d6147d97d74f9f4899f806fe0f02c9"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int16 ticks\n\
int16 angle\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, ticks);
    ros::serialization::serialize(stream, angle);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, ticks);
    ros::serialization::deserialize(stream, angle);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(ticks);
    size += ros::serialization::serializationLength(angle);
    return size;
  }

  typedef boost::shared_ptr< ::arduino_broadcaster::arduino_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arduino_broadcaster::arduino_data_<ContainerAllocator>  const> ConstPtr;
}; // struct arduino_data
typedef  ::arduino_broadcaster::arduino_data_<std::allocator<void> > arduino_data;

typedef boost::shared_ptr< ::arduino_broadcaster::arduino_data> arduino_dataPtr;
typedef boost::shared_ptr< ::arduino_broadcaster::arduino_data const> arduino_dataConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::arduino_broadcaster::arduino_data_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::arduino_broadcaster::arduino_data_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace arduino_broadcaster

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::arduino_broadcaster::arduino_data_<ContainerAllocator> > {
  static const char* value() 
  {
    return "11d6147d97d74f9f4899f806fe0f02c9";
  }

  static const char* value(const  ::arduino_broadcaster::arduino_data_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x11d6147d97d74f9fULL;
  static const uint64_t static_value2 = 0x4899f806fe0f02c9ULL;
};

template<class ContainerAllocator>
struct DataType< ::arduino_broadcaster::arduino_data_<ContainerAllocator> > {
  static const char* value() 
  {
    return "arduino_broadcaster/arduino_data";
  }

  static const char* value(const  ::arduino_broadcaster::arduino_data_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::arduino_broadcaster::arduino_data_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int16 ticks\n\
int16 angle\n\
\n\
";
  }

  static const char* value(const  ::arduino_broadcaster::arduino_data_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::arduino_broadcaster::arduino_data_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::arduino_broadcaster::arduino_data_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.ticks);
    stream.next(m.angle);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct arduino_data_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arduino_broadcaster::arduino_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::arduino_broadcaster::arduino_data_<ContainerAllocator> & v) 
  {
    s << indent << "ticks: ";
    Printer<int16_t>::stream(s, indent + "  ", v.ticks);
    s << indent << "angle: ";
    Printer<int16_t>::stream(s, indent + "  ", v.angle);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ARDUINO_BROADCASTER_MESSAGE_ARDUINO_DATA_H

